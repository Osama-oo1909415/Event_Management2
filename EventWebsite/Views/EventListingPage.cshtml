@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage

@{
    Layout = "Shared/_Layout.cshtml";
    ViewBag.Title = "Upcoming Events";
    
    // Get events from controller (preferred) or use our own logic as fallback
    var eventsFromController = ViewData["AllEvents"] as List<Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent>;
    
    // If controller didn't provide events, try multiple ways to get them
    List<Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent> events;
    
    if (eventsFromController != null && eventsFromController.Any()) 
    {
        // Use events from controller
        events = eventsFromController;
        System.Diagnostics.Debug.WriteLine($"Using {events.Count} events from controller");
    }
    else
    {
        // Try directly from descendants by type
        var rootEvents = Model?.Root()?.DescendantsOfType("event")?.Where(x => x.IsPublished())?.ToList() 
            ?? new List<Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent>();
            
        // Fallback to any content with "event" in the type name
        if (!rootEvents.Any())
        {
            rootEvents = Model?.Root()?.Descendants()
                ?.Where(x => (x.ContentType.Alias.Contains("event") || x.ContentType.Alias.Contains("Event")) && x.IsPublished())
                ?.ToList() 
                ?? new List<Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent>();
        }
        
        events = rootEvents;
        System.Diagnostics.Debug.WriteLine($"Found {events.Count} events directly from content tree");
    }
    
    // Filter for upcoming events using the correct property alias
    var upcomingEvents = events.Where(x => x.HasValue("eventDateTime") && x.Value<DateTime>("eventDateTime") >= DateTime.Today).ToList();

    // Order the events by date
    var sortedEvents = upcomingEvents.OrderBy(x => x.Value<DateTime>("eventDateTime"));

    // Prepare event locations for the map using longitude and latitude properties
    var eventLocations = sortedEvents
        .Where(x => x.HasValue("longitude") && x.HasValue("latitude"))
        .Select(x => {
            double lng, lat;
            var lngParsed = double.TryParse(x.Value<string>("longitude"), out lng);
            var latParsed = double.TryParse(x.Value<string>("latitude"), out lat);
            return (lngParsed && latParsed)
                ? new {
                    Title = x.Value("eventTitle") ?? x.Name,
                    Lat = lat,
                    Lng = lng
                }
                : null;
        })
        .Where(x => x != null)
        .ToList();
}

<!-- Hero Section -->
<div class="hero-section">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 mx-auto text-center">
                <h1 class="display-4 fw-bold mb-4">Upcoming Events</h1>
                <p class="lead">Discover amazing events happening in your area</p>
                <!-- Search Bar -->
                <form class="d-flex justify-content-center mt-4 mb-2" method="get" action="/events">
                    <input type="text" name="q" class="form-control form-control-lg w-75 rounded-pill shadow-sm" placeholder="Search events by name, category, or location..." style="max-width: 500px;">
                    <button class="btn btn-primary ms-2 rounded-pill px-4" type="submit">Search</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Events Listing -->
<div class="container mt-5">
    <main>
        <div class="row g-4">
            @if (sortedEvents.Any())
            {
                @foreach (var evt in sortedEvents)
                {
                    var featuredImage = evt.Value<IPublishedContent>("featuredImage");
                    var eventDate = evt.Value<DateTime>("eventDateTime");
                    var eventCategory = evt.Value<IEnumerable<string>>("eventCategory");
                    <div class="col-lg-4 col-md-6 mb-4">
                        <div class="card event-card h-100 p-2 border-0 shadow-sm rounded-4 position-relative" style="background:#fff;">
                            <!-- Date Badge -->
                            <span class="badge bg-primary position-absolute top-0 end-0 m-3 px-3 py-2 rounded-pill" style="font-size:1rem;">@eventDate.ToString("MMM dd")</span>
                            <!-- Category Tags -->
                            @if (eventCategory != null && eventCategory.Any())
                            {
                                <div class="mb-2 mt-2">
                                    @foreach (var cat in eventCategory)
                                    {
                                        <span class="badge bg-secondary me-1 mb-1" style="font-size:0.85rem;">@cat</span>
                                    }
                                </div>
                            }
                            @if (featuredImage != null)
                            {
                                <img src="@featuredImage.Url()" class="card-img-top rounded-4" alt="@featuredImage.Name" style="height: 200px; object-fit: cover;">
                            }
                            else
                            {
                                <div class="card-img-top bg-light d-flex align-items-center justify-content-center rounded-4" style="height: 200px;">
                                    <i class="fas fa-calendar-alt fa-3x text-muted"></i>
                                </div>
                            }
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title mb-2" style="font-weight:600;">@evt.Value("eventTitle")</h5>
                                <div class="mb-3">
                                    <small class="text-muted">
                                        <i class="fas fa-calendar-alt me-1"></i>
                                        @eventDate.ToString("MMM dd, yyyy")
                                    </small>
                                    <br>
                                    <small class="text-muted">
                                        <i class="fas fa-clock me-1"></i>
                                        @eventDate.ToString("h:mm tt")
                                    </small>
                                    <br>
                                    <small class="text-muted">
                                        <i class="fas fa-map-marker-alt me-1"></i>
                                        @evt.Value("location")
                                    </small>
                                </div>
                                <div class="mt-auto">
                                    <a href="@evt.Url()" class="btn btn-primary w-100 rounded-pill fw-semibold">
                                        View Details
                                        <i class="fas fa-arrow-right ms-1"></i>
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12">
                    <div class="text-center py-5">
                        <i class="fas fa-calendar-times fa-4x text-muted mb-3"></i>
                        <h3 class="text-muted">No Upcoming Events</h3>
                        <p class="text-muted">There are no upcoming events at this time. Please check back later!</p>
                    </div>
                </div>
            }
        </div>
        <!-- Map for Event Locations (Leaflet) -->
        <div class="row">
            <div class="col-12">
                <div id="eventsMap" style="height: 400px; width: 100%; border-radius: 12px;"></div>
            </div>
        </div>
    </main>
</div>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-sA+e2H1LG2Q6F2zLk4k6lQ+QbF3p9Oa6l2l9gKQ+0Xw=" crossorigin=""/>
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-o9N1jRVv6Gk6f+gQJbFQ1QKQ1QKQ1QKQ1QKQ1QKQ1QKQ=" crossorigin=""></script>
<script>
    var eventLocations = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(eventLocations));
    var mapCenter = eventLocations.length > 0 ? [eventLocations[0].Lat, eventLocations[0].Lng] : [25.3, 51.5]; // Default to Doha
    var map = L.map('eventsMap').setView(mapCenter, 10);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);
    eventLocations.forEach(function(ev) {
        if(ev.Lat && ev.Lng) {
            L.marker([ev.Lat, ev.Lng]).addTo(map)
                .bindPopup(ev.Title);
        }
    });
</script>

<!-- Debug Information Section (Remove in production) -->
@if(Context.Request.Query.ContainsKey("debug"))
{
    <div class="container mt-5 p-4 bg-light rounded">
        <h4>Debug Information</h4>
        <hr>
        <p><strong>Total Events Found:</strong> @events.Count()</p>
        <p><strong>Upcoming Events:</strong> @upcomingEvents.Count()</p>
        <p><strong>Sorted Events:</strong> @sortedEvents.Count()</p>
        
        <h5 class="mt-4">Event Data:</h5>
        <div class="table-responsive">
            <table class="table table-sm table-bordered">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Title</th>
                        <th>Date/Time</th>
                        <th>Content Type</th>
                        <th>Published</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var evt in events)
                    {
                        <tr>
                            <td>@evt.Id</td>
                            <td>@evt.Name</td>
                            <td>@evt.Value("eventTitle")</td>
                            <td>@(evt.HasValue("eventDateTime") ? evt.Value<DateTime>("eventDateTime").ToString() : "No Date")</td>
                            <td>@evt.ContentType.Alias</td>
                            <td>@evt.IsPublished()</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        
        <h5 class="mt-4">Page Model Properties:</h5>
        <ul>
            @if (Model != null)
            {
                foreach (var prop in Model.Properties)
                {
                    <li>@prop.Alias: @prop.GetValue()</li>
                }
            }
            else
            {
                <li>Model is null</li>
            }
        </ul>
    </div>
}